package com.bantuops.backend.service;

import com.bantuops.backend.dto.SecurityAlert;
import com.bantuops.backend.entity.User;
import com.bantuops.backend.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Service de notification pour les alertes de s√©curit√©
 * G√®re l'envoi de notifications aux utilisateurs, superviseurs et √©quipe de s√©curit√©
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class SecurityNotificationService {

    private final UserRepository userRepository;
    
    private static final DateTimeFormatter FORMATTER = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");

    /**
     * Envoie une notification √† un utilisateur
     */
    @Async
    public void sendUserNotification(String userId, String subject, String message) {
        try {
            log.info("Envoi de notification √† l'utilisateur: {} - Sujet: {}", userId, subject);
            
            userRepository.findByUsername(userId).ifPresentOrElse(
                user -> {
                    // Simuler l'envoi d'email/SMS
                    sendEmailNotification(user.getEmail(), subject, message);
                    log.info("Notification envoy√©e √† l'utilisateur: {}", userId);
                },
                () -> log.warn("Utilisateur non trouv√© pour la notification: {}", userId)
            );
        } catch (Exception e) {
            log.error("Erreur lors de l'envoi de notification √† l'utilisateur: {}", userId, e);
        }
    }

    /**
     * Envoie une notification au superviseur d'un utilisateur
     */
    @Async
    public void sendSupervisorNotification(String userId, SecurityAlert alert) {
        try {
            log.info("Envoi de notification au superviseur pour l'utilisateur: {}", userId);
            
            userRepository.findByUsername(userId).ifPresent(user -> {
                if (user.getSupervisorId() != null) {
                    userRepository.findById(user.getSupervisorId()).ifPresent(supervisor -> {
                        String subject = "Alerte de s√©curit√© - Employ√© sous votre supervision";
                        String message = formatSupervisorMessage(user, alert);
                        
                        sendEmailNotification(supervisor.getEmail(), subject, message);
                        log.info("Notification superviseur envoy√©e pour l'utilisateur: {}", userId);
                    });
                }
            });
        } catch (Exception e) {
            log.error("Erreur lors de l'envoi de notification au superviseur pour: {}", userId, e);
        }
    }

    /**
     * Envoie une alerte √† l'√©quipe de s√©curit√©
     */
    @Async
    public void sendSecurityTeamAlert(SecurityAlert alert) {
        try {
            log.warn("Envoi d'alerte √† l'√©quipe de s√©curit√© pour l'alerte: {}", alert.getId());
            
            List<User> securityTeam = userRepository.findByRole("SECURITY_ADMIN");
            
            String subject = "Alerte de s√©curit√© - " + alert.getAlertType().getDescription();
            String message = formatSecurityTeamMessage(alert);
            
            securityTeam.forEach(admin -> {
                sendEmailNotification(admin.getEmail(), subject, message);
                sendSmsNotification(admin.getPhoneNumber(), 
                    "Alerte s√©curit√©: " + alert.getAlertType().getDescription());
            });
            
            log.warn("Alerte √©quipe de s√©curit√© envoy√©e pour l'alerte: {}", alert.getId());
        } catch (Exception e) {
            log.error("Erreur lors de l'envoi d'alerte √† l'√©quipe de s√©curit√©", e);
        }
    }

    /**
     * Envoie une notification √† l'√©quipe de s√©curit√©
     */
    @Async
    public void sendSecurityTeamNotification(String subject, String message) {
        try {
            log.info("Envoi de notification √† l'√©quipe de s√©curit√©: {}", subject);
            
            List<User> securityTeam = userRepository.findByRole("SECURITY_ADMIN");
            
            securityTeam.forEach(admin -> {
                sendEmailNotification(admin.getEmail(), subject, message);
            });
            
            log.info("Notification √©quipe de s√©curit√© envoy√©e");
        } catch (Exception e) {
            log.error("Erreur lors de l'envoi de notification √† l'√©quipe de s√©curit√©", e);
        }
    }

    /**
     * Envoie une alerte critique de s√©curit√©
     */
    @Async
    public void sendCriticalSecurityAlert(SecurityAlert alert) {
        try {
            log.error("Envoi d'alerte critique de s√©curit√© pour l'alerte: {}", alert.getId());
            
            List<User> allAdmins = userRepository.findByRoleIn(List.of("ADMIN", "SECURITY_ADMIN", "SUPER_ADMIN"));
            
            String subject = "üö® ALERTE CRITIQUE DE S√âCURIT√â - " + alert.getAlertType().getDescription();
            String message = formatCriticalAlertMessage(alert);
            
            allAdmins.forEach(admin -> {
                sendEmailNotification(admin.getEmail(), subject, message);
                sendSmsNotification(admin.getPhoneNumber(), 
                    "ALERTE CRITIQUE: " + alert.getAlertType().getDescription());
                
                // Appel t√©l√©phonique pour les alertes critiques
                initiatePhoneCall(admin.getPhoneNumber(), 
                    "Alerte critique de s√©curit√© d√©tect√©e dans BantuOps");
            });
            
            log.error("Alerte critique envoy√©e √† tous les administrateurs");
        } catch (Exception e) {
            log.error("Erreur lors de l'envoi d'alerte critique", e);
        }
    }

    /**
     * Envoie une notification d'urgence √† tous les administrateurs
     */
    @Async
    public void sendEmergencyNotificationToAllAdmins(SecurityAlert alert) {
        try {
            log.error("Envoi de notification d'urgence √† tous les administrateurs");
            
            List<User> allAdmins = userRepository.findByRoleIn(List.of("ADMIN", "SECURITY_ADMIN", "SUPER_ADMIN"));
            
            String subject = "üö® URGENCE S√âCURIT√â - Action imm√©diate requise";
            String message = formatEmergencyMessage(alert);
            
            allAdmins.forEach(admin -> {
                sendEmailNotification(admin.getEmail(), subject, message);
                sendSmsNotification(admin.getPhoneNumber(), 
                    "URGENCE S√âCURIT√â BantuOps - Intervention imm√©diate requise");
                initiatePhoneCall(admin.getPhoneNumber(), 
                    "Urgence s√©curit√© BantuOps - Intervention imm√©diate requise");
            });
            
            log.error("Notification d'urgence envoy√©e √† tous les administrateurs");
        } catch (Exception e) {
            log.error("Erreur lors de l'envoi de notification d'urgence", e);
        }
    }

    /**
     * Envoie une notification d'urgence avec message personnalis√©
     */
    @Async
    public void sendEmergencyNotificationToAllAdmins(String subject, String message) {
        try {
            log.error("Envoi de notification d'urgence personnalis√©e: {}", subject);
            
            List<User> allAdmins = userRepository.findByRoleIn(List.of("ADMIN", "SECURITY_ADMIN", "SUPER_ADMIN"));
            
            allAdmins.forEach(admin -> {
                sendEmailNotification(admin.getEmail(), "üö® " + subject, message);
                sendSmsNotification(admin.getPhoneNumber(), subject);
            });
            
            log.error("Notification d'urgence personnalis√©e envoy√©e");
        } catch (Exception e) {
            log.error("Erreur lors de l'envoi de notification d'urgence personnalis√©e", e);
        }
    }

    /**
     * Envoie une notification aux administrateurs
     */
    @Async
    public void sendAdminNotification(String subject, String message) {
        try {
            log.info("Envoi de notification aux administrateurs: {}", subject);
            
            List<User> admins = userRepository.findByRole("ADMIN");
            
            admins.forEach(admin -> {
                sendEmailNotification(admin.getEmail(), subject, message);
            });
            
            log.info("Notification administrateurs envoy√©e");
        } catch (Exception e) {
            log.error("Erreur lors de l'envoi de notification aux administrateurs", e);
        }
    }

    /**
     * Envoie une alerte syst√®me critique
     */
    @Async
    public void sendCriticalSystemAlert(String subject, String message) {
        try {
            log.error("Envoi d'alerte syst√®me critique: {}", subject);
            
            List<User> systemAdmins = userRepository.findByRoleIn(List.of("SUPER_ADMIN", "SYSTEM_ADMIN"));
            
            systemAdmins.forEach(admin -> {
                sendEmailNotification(admin.getEmail(), "üö® CRITIQUE - " + subject, message);
                sendSmsNotification(admin.getPhoneNumber(), "CRITIQUE: " + subject);
                initiatePhoneCall(admin.getPhoneNumber(), message);
            });
            
            log.error("Alerte syst√®me critique envoy√©e");
        } catch (Exception e) {
            log.error("Erreur lors de l'envoi d'alerte syst√®me critique", e);
        }
    }

    /**
     * Envoie une alerte critique g√©n√©rale
     */
    @Async
    public void sendCriticalAlert(String subject, String message) {
        try {
            log.error("Envoi d'alerte critique: {}", subject);
            
            List<User> criticalRecipients = userRepository.findByRoleIn(
                List.of("ADMIN", "SECURITY_ADMIN", "SUPER_ADMIN"));
            
            criticalRecipients.forEach(recipient -> {
                sendEmailNotification(recipient.getEmail(), "üö® " + subject, message);
                sendSmsNotification(recipient.getPhoneNumber(), subject);
            });
            
            log.error("Alerte critique envoy√©e");
        } catch (Exception e) {
            log.error("Erreur lors de l'envoi d'alerte critique", e);
        }
    }

    /**
     * Formate le message pour le superviseur
     */
    private String formatSupervisorMessage(User employee, SecurityAlert alert) {
        return String.format("""
            Bonjour,
            
            Une alerte de s√©curit√© a √©t√© d√©tect√©e pour l'employ√© sous votre supervision:
            
            Employ√©: %s (%s)
            Type d'alerte: %s
            S√©v√©rit√©: %s
            Date/Heure: %s
            Description: %s
            
            Veuillez prendre les mesures appropri√©es et contacter l'√©quipe de s√©curit√© si n√©cessaire.
            
            Cordialement,
            Syst√®me de s√©curit√© BantuOps
            """,
            employee.getFullName(),
            employee.getUsername(),
            alert.getAlertType().getDescription(),
            alert.getSeverity().getLabel(),
            alert.getTimestamp().format(FORMATTER),
            alert.getDescription()
        );
    }

    /**
     * Formate le message pour l'√©quipe de s√©curit√©
     */
    private String formatSecurityTeamMessage(SecurityAlert alert) {
        return String.format("""
            ALERTE DE S√âCURIT√â D√âTECT√âE
            
            ID Alerte: %s
            Type: %s
            S√©v√©rit√©: %s
            Utilisateur: %s
            Date/Heure: %s
            IP: %s
            User-Agent: %s
            
            Description: %s
            
            M√©tadonn√©es: %s
            
            Action requise: Veuillez investiguer imm√©diatement.
            
            Syst√®me de s√©curit√© BantuOps
            """,
            alert.getId(),
            alert.getAlertType().getDescription(),
            alert.getSeverity().getLabel(),
            alert.getUserId(),
            alert.getTimestamp().format(FORMATTER),
            alert.getIpAddress(),
            alert.getUserAgent(),
            alert.getDescription(),
            alert.getMetadata()
        );
    }

    /**
     * Formate le message d'alerte critique
     */
    private String formatCriticalAlertMessage(SecurityAlert alert) {
        return String.format("""
            üö® ALERTE CRITIQUE DE S√âCURIT√â üö®
            
            Une alerte de s√©curit√© critique n√©cessite votre attention imm√©diate.
            
            ID Alerte: %s
            Type: %s
            S√©v√©rit√©: %s
            Utilisateur: %s
            Date/Heure: %s
            IP: %s
            
            Description: %s
            
            INTERVENTION IMM√âDIATE REQUISE
            
            Veuillez vous connecter au syst√®me de s√©curit√© pour plus de d√©tails.
            
            Syst√®me de s√©curit√© BantuOps
            """,
            alert.getId(),
            alert.getAlertType().getDescription(),
            alert.getSeverity().getLabel(),
            alert.getUserId(),
            alert.getTimestamp().format(FORMATTER),
            alert.getIpAddress(),
            alert.getDescription()
        );
    }

    /**
     * Formate le message d'urgence
     */
    private String formatEmergencyMessage(SecurityAlert alert) {
        return String.format("""
            üö®üö® URGENCE S√âCURIT√â - ACTION IMM√âDIATE REQUISE üö®üö®
            
            Une situation d'urgence de s√©curit√© a √©t√© d√©tect√©e dans le syst√®me BantuOps.
            
            Type d'incident: %s
            S√©v√©rit√©: CRITIQUE
            Heure de d√©tection: %s
            Utilisateur impliqu√©: %s
            
            Description: %s
            
            MESURES AUTOMATIQUES D√âCLENCH√âES
            
            Veuillez vous connecter IMM√âDIATEMENT au syst√®me pour √©valuer la situation
            et prendre les mesures correctives n√©cessaires.
            
            En cas d'indisponibilit√©, contactez l'√©quipe de s√©curit√© d'urgence.
            
            Syst√®me de s√©curit√© BantuOps
            """,
            alert.getAlertType().getDescription(),
            alert.getTimestamp().format(FORMATTER),
            alert.getUserId(),
            alert.getDescription()
        );
    }

    /**
     * Simule l'envoi d'un email
     */
    private void sendEmailNotification(String email, String subject, String message) {
        // Dans un vrai syst√®me, int√©grer avec un service d'email (SendGrid, AWS SES, etc.)
        log.info("EMAIL envoy√© √† {}: {}", email, subject);
    }

    /**
     * Simule l'envoi d'un SMS
     */
    private void sendSmsNotification(String phoneNumber, String message) {
        // Dans un vrai syst√®me, int√©grer avec un service SMS (Twilio, AWS SNS, etc.)
        log.info("SMS envoy√© √† {}: {}", phoneNumber, message);
    }

    /**
     * Simule un appel t√©l√©phonique automatique
     */
    private void initiatePhoneCall(String phoneNumber, String message) {
        // Dans un vrai syst√®me, int√©grer avec un service d'appel automatique
        log.error("APPEL AUTOMATIQUE initi√© vers {}: {}", phoneNumber, message);
    }
}